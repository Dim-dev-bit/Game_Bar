//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""82f456a1-8d90-41c4-8bb5-e649c57b61f3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ca410b4c-0a86-4abb-b171-e616a4b6a794"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""336e3b99-3ca9-4e22-a2d0-ca9903b3d99f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a1eaac25-d39d-4e7b-844a-768e087b7011"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5f775fd3-7994-439c-ac55-9d6286b093da"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""79835f35-1d5f-4a5f-ba58-fe40717192e0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""859ccb80-6304-497f-8877-42e9fb07d119"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ObjectInteraction"",
            ""id"": ""cd3f856a-b223-4859-8241-40c80cf4fc1e"",
            ""actions"": [
                {
                    ""name"": ""TakeAnObject"",
                    ""type"": ""Button"",
                    ""id"": ""c4782abf-c60a-4633-b588-6fed794ec1eb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b4b0b775-164e-4cd0-9b2e-69ae9779e873"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakeAnObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        // ObjectInteraction
        m_ObjectInteraction = asset.FindActionMap("ObjectInteraction", throwIfNotFound: true);
        m_ObjectInteraction_TakeAnObject = m_ObjectInteraction.FindAction("TakeAnObject", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerControls.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ObjectInteraction.enabled, "This will cause a leak and performance issues, PlayerControls.ObjectInteraction.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // ObjectInteraction
    private readonly InputActionMap m_ObjectInteraction;
    private List<IObjectInteractionActions> m_ObjectInteractionActionsCallbackInterfaces = new List<IObjectInteractionActions>();
    private readonly InputAction m_ObjectInteraction_TakeAnObject;
    public struct ObjectInteractionActions
    {
        private @PlayerControls m_Wrapper;
        public ObjectInteractionActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TakeAnObject => m_Wrapper.m_ObjectInteraction_TakeAnObject;
        public InputActionMap Get() { return m_Wrapper.m_ObjectInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ObjectInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IObjectInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_ObjectInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ObjectInteractionActionsCallbackInterfaces.Add(instance);
            @TakeAnObject.started += instance.OnTakeAnObject;
            @TakeAnObject.performed += instance.OnTakeAnObject;
            @TakeAnObject.canceled += instance.OnTakeAnObject;
        }

        private void UnregisterCallbacks(IObjectInteractionActions instance)
        {
            @TakeAnObject.started -= instance.OnTakeAnObject;
            @TakeAnObject.performed -= instance.OnTakeAnObject;
            @TakeAnObject.canceled -= instance.OnTakeAnObject;
        }

        public void RemoveCallbacks(IObjectInteractionActions instance)
        {
            if (m_Wrapper.m_ObjectInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IObjectInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_ObjectInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ObjectInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ObjectInteractionActions @ObjectInteraction => new ObjectInteractionActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IObjectInteractionActions
    {
        void OnTakeAnObject(InputAction.CallbackContext context);
    }
}
